apiVersion: v1
kind: Template

metadata:
  name: odh-landscape

parameters:
  - name: APPLICATION_NAME
    value: odh-landscape
    required: true
  - name: ROUTE_NAME
    value: odh-landscape
    required: true
  - name: HOST_NAME
    value: opendatahub.io
    required: true
  - name: REPLICAS
    value: "1"
    required: true
  - name: IMAGE_REPOSITORY
    value: quay.io/opendatahub/odh-landscape:latest
    required: true
  - name: KEY
  - name: CERTIFICATE
  - name: CA_CERTIFICATE
  - name: CONTAINER_REQUEST_CPU
    value: 500m
  - name: CONTAINER_REQUEST_MEMORY
    value: 500Mi
  - name: CONTAINER_LIMIT_CPU
    value: 500m
  - name: CONTAINER_LIMIT_MEMORY
    value: 1000Mi

objects:
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: ${{REPLICAS}}
      revisionHistoryLimit: 2
      selector:
        app: ${APPLICATION_NAME}
      strategy:
        rollingParams:
          timeoutSeconds: 3600
        type: Rolling
      template:
        metadata:
          labels:
            app: ${APPLICATION_NAME}
        spec:
          imagePullSecrets:
            - name: ${APPLICATION_NAME}-pull
          containers:
            - image: ${IMAGE_REPOSITORY}
              imagePullPolicy: Always
              name: ${APPLICATION_NAME}
              ports:
                - containerPort: 8080
                  name: http
                  protocol: TCP
              resources:
                requests:
                  cpu: ${CONTAINER_REQUEST_CPU}
                  memory: ${CONTAINER_REQUEST_MEMORY}
                limits:
                  cpu: ${CONTAINER_LIMIT_CPU}
                  memory: ${CONTAINER_LIMIT_MEMORY}
      triggers:
        - type: ConfigChange


  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
        - name: http
          port: 8080
      selector:
        app: ${APPLICATION_NAME}

  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${ROUTE_NAME}
    spec:
      port:
        targetPort: 8080
      to:
        kind: Service
        name: ${APPLICATION_NAME}
      tls:
        termination: edge
        key: |-
          ${KEY}
        certificate: |-
          ${CERTIFICATE}
        caCertificate: |-
          ${CA_CERTIFICATE}
        insecureEdgeTerminationPolicy: Redirect
      wildcardPolicy: None

  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${HOST_NAME}
    spec:
      host: ${HOST_NAME}
      port:
        targetPort: 8080
      to:
        kind: Service
        name: ${APPLICATION_NAME}
      tls:
        termination: edge
        key: |-
          ${KEY}
        certificate: |-
          ${CERTIFICATE}
        caCertificate: |-
          ${CA_CERTIFICATE}
        insecureEdgeTerminationPolicy: Redirect
      wildcardPolicy: None


