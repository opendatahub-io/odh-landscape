apiVersion: v1
kind: Template

metadata:
  name: odh-landscape

parameters:
  - name: APPLICATION_NAME
    value: odh-landscape
    required: true
  - name: ROUTE_NAME
    value: odh-landscape
    required: true
  - name: REPLICAS
    value: "1"
    required: true
  - name: SOURCE_REPOSITORY_URL
    description: The source URL for the application
    displayName: Source URL
    value: https://gitlab.com/opendatahub/odh-landscape.git
    required: true
  - name: SOURCE_REPOSITORY_REF
    description: The branch name folibrary-uir the application
    displayName: Source Branch
    value: master
    required: true
  - name: SOURCE_REPOSITORY_DIR
    description: The location within the source repo of the application
    displayName: Source Directory
    value: /
    required: true
  - name: OUTPUT_DIR
    description: The location of the compiled static files from your web apps builder
    displayName: Output Directory
    value: dist
    required: false
  - name: KEY
  - name: CERTIFICATE
  - name: CA_CERTIFICATE
  - name: CONTAINER_REQUEST_CPU
    value: 500m
  - name: CONTAINER_REQUEST_MEMORY
    value: 500Mi
  - name: CONTAINER_LIMIT_CPU
    value: 500m
  - name: CONTAINER_LIMIT_MEMORY
    value: 500Mi

objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      name: ${APPLICATION_NAME}-builder
    spec: {}

  - apiVersion: v1
    kind: ImageStream
    metadata:
      name: web-app-builder-runtime
    spec:
      tags:
        - name: latest
          from:
            kind: DockerImage
            name: nodeshift/centos7-s2i-web-app:12.x

  - apiVersion: v1
    kind: BuildConfig
    metadata:
      name: ${APPLICATION_NAME}-builder
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-builder:latest
      postCommit: {}
      resources:
        requests:
          cpu: 200m
          memory: 500Mi
        limits:
          cpu: 1000m
          memory: 1Gi
      source:
        git:
          uri: ${SOURCE_REPOSITORY_URL}
          ref: ${SOURCE_REPOSITORY_REF}
        contextDir: ${SOURCE_REPOSITORY_DIR}
        type: Git
      strategy:
        sourceStrategy:
          env:
            - name: GIT_SSL_NO_VERIFY
              value: "true"
            - name: OUTPUT_DIR
              value: ${OUTPUT_DIR}
          from:
            kind: ImageStreamTag
            name: web-app-builder-runtime:latest
        type: Source
      triggers:
        - type: ConfigChange
        - imageChange: {}
          type: ImageChange

  - apiVersion: v1
    kind: ImageStream
    metadata:
      name: ${APPLICATION_NAME}-nginx
    spec: {}

  - apiVersion: v1
    kind: ImageStream
    metadata:
      name: nginx-image-runtime
    spec:
      tags:
        - name: latest
          from:
            kind: DockerImage
            name: "centos/nginx-112-centos7:latest"

  - apiVersion: v1
    kind: BuildConfig
    metadata:
      name: ${APPLICATION_NAME}-nginx
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-nginx:latest
      postCommit: {}
      resources:
        requests:
          cpu: 200m
          memory: 500Mi
        limits:
          cpu: 1000m
          memory: 2Gi
      source:
        type: Image
        images:
          - from:
              kind: ImageStreamTag
              name: ${APPLICATION_NAME}-builder:latest
            paths:
              - destinationDir: .
                sourcePath: /opt/app-root/output/.
      strategy:
        sourceStrategy:
          from:
            kind: ImageStreamTag
            name: nginx-image-runtime:latest
        type: Source
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChange: {}
        - type: ImageChange
          imageChange:
            from:
              kind: ImageStreamTag
              name: ${APPLICATION_NAME}-builder:latest
    status:
      lastVersion: 0

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: ${{REPLICAS}}
      revisionHistoryLimit: 2
      selector:
        app: ${APPLICATION_NAME}
      strategy:
        rollingParams:
          timeoutSeconds: 3600
        type: Rolling
      template:
        metadata:
          labels:
            app: ${APPLICATION_NAME}
        spec:
          containers:
            - env:
                - name: KUBERNETES_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
              image: ${APPLICATION_NAME}-nginx
              imagePullPolicy: IfNotPresent
              name: ${APPLICATION_NAME}-nginx
              ports:
                - containerPort: 8080
                  name: http
                  protocol: TCP
              resources:
                requests:
                  cpu: ${CONTAINER_REQUEST_CPU}
                  memory: ${CONTAINER_REQUEST_MEMORY}
                limits:
                  cpu: ${CONTAINER_LIMIT_CPU}
                  memory: ${CONTAINER_LIMIT_MEMORY}

      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${APPLICATION_NAME}-nginx
            from:
              kind: ImageStreamTag
              name: ${APPLICATION_NAME}-nginx:latest

  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
        - name: http
          port: 8080
      selector:
        app: ${APPLICATION_NAME}

  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${ROUTE_NAME}
    spec:
      port:
        targetPort: 8080
      to:
        kind: Service
        name: ${APPLICATION_NAME}
      tls:
        termination: edge
        key: |-
          ${KEY}
        certificate: |-
          ${CERTIFICATE}
        caCertificate: |-
          ${CA_CERTIFICATE}
        insecureEdgeTerminationPolicy: Redirect
      wildcardPolicy: None


